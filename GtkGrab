#!/usr/bin/env python2
# This file is part of GtkGrab.
#
# GtkGrab is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# GtkGrab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GtkGrab.  If not, see <http://www.gnu.org/licenses/>.
#
# @category   GtkGrab
# @license    http://www.gnu.org/licenses/gpl-3.0.txt GPL
# @copyright  Copyright 2010-2013 Evan Coury (http://www.Evan.pro/)
# @copyright  Copyright 2010-2013 Pieter Kokx (http://kokx.nl/)
# @package    Client

import ConfigParser, sys, urllib2, os, base64, hashlib, pyperclip, time

from os.path import expanduser;
home = expanduser("~");

config = ConfigParser.ConfigParser()
try:
    config.readfp(open(home + '/.GtkGrab/config.cfg'))
except IOError:
    print "Please configure GtkGrab, in ~/.GtkGrab/config.cfg"
    print "You can find a sample configuration file in"
    print "/usr/share/GtkGrab/"
    sys.exit(1)

postURL = config.get('GtkGrab','posturl')
command = config.get('GtkGrab','command')

if len(sys.argv) > 1 and sys.argv[1] == 'gif':
    command = os.path.dirname(__file__) + '/' + config.get('GtkGrab','gifCommand')

notifyCommand = config.get('GtkGrab','notifyCommand')

path = config.get('GtkGrab','capPath')

if config.has_option('GtkGrab','delay'):
    time.sleep(float(config.get('GtkGrab','delay')))

if os.system(command.replace("%s", path)) != 0:
    if config.has_option('GtkGrab','notifyFailCommand'):
        os.system(config.get('GtkGrab','notifyFailCommand'))
    exit()

if postURL == 's3':
    bucket = config.get('GtkGrab', 's3bucket')
    prefix = config.get('GtkGrab', 's3prefix')

    now = time.localtime()
    year = str(now.tm_year)
    hour = time.strftime('%m', now)

    filename = time.strftime('%Y-%m-%d_%H-%M-%S', now) + '.png'
    s3Path = bucket
    if prefix:
        s3Path += '/' + prefix
    s3Path += '/' + str(now.tm_year) + '/' + str(now.tm_mon) + '/' + filename

    s3Url = 's3://' + s3Path
    uploadCommand = 's3cmd ';
    if (os.path.exists('.s3cfg')):
        uploadCommand += '-c .s3cfg '
    uploadCommand += 'put ' + path + ' ' + s3Url + ' --acl-public --rr'
    os.system(uploadCommand)
    url = 'http://' + s3Path
else:
    user = config.get('GtkGrab','username')
    token = config.get('GtkGrab','password')

    # encode the screenshot with base64
    data = base64.b64encode(open(path, 'r').read())
    # hash the data with the user's secret token and send that as header
    hash = hashlib.sha1()
    hash.update(data)
    hash.update(token)
    headers = {'X-Username': user, 'X-Signature': hash.hexdigest(), 'Content-Type': 'text/xml'}
    # upload the url and give the screenshot url to the user
    url = urllib2.urlopen(urllib2.Request(postURL, data, headers)).read()

# remove the file
os.remove(path)

pyperclip.copy(url)

os.system(notifyCommand.replace('%s', url))
